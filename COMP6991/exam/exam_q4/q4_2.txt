1. Rc<T> in Rust uses non-atomic operations to update the reference count, which can lead to data races in a multithreaded environment. If Rc<T> were Send, allowing it to be transferred across threads, concurrent modifications to the reference count could occur when one thread attempts to move it while another modifies the count. This could corrupt the reference count, leading to possible scenarios where two threads decrement the count concurrently. Each thread could read the count before the other has written back the updated value, resulting in an incorrect reference count. This miscount could lead to the managed resource being released prematurely or not released when it should be, leading to potential memory safety issues.

2. Arc<T> is just a thread-safe reference counter, designed to ensure that the data it points to is not deallocated until all references to it have been dropped. It will not manage or protect the data which it wrap. Without Sync, the underlying data is not protected against concurrent modifications, for multiple threads holding arc, they are allowed to manipulate the data in it at the same time, which leading to data races, corruption, or other issues.

